function rksFunctionTest_func() {

	global $wpdb;

	$doDebug						= FALSE;
	$testMode						= FALSE;
	$initializationArray 			= data_initialization_func();
	if ($doDebug) {
		echo "Initialization Array:<br /><pre>";
		print_r($initializationArray);
		echo "</pre><br />";
	}
	$validUser 			= $initializationArray['validUser'];
	$userName			= $initializationArray['userName'];
	$currentTimestamp	= $initializationArray['currentTimestamp'];
	$validTestmode		= $initializationArray['validTestmode'];
	$siteURL			= $initializationArray['siteurl'];
	$jobname			= "RKSTEST Update AdvisorClass Records";
	$actionDate			= date('dMY H:i');
	
//	CHECK THIS!								//////////////////////
	if ($validUser == "N") {
		return "YOU'RE NOT AUTHORIZED!<br />Goodby";
	}

//	ini_set('memory_limit','256M');
//	ini_set('max_execution_time',0);
//	set_time_limit(0);

//	if ($doDebug) {
		ini_set('display_errors','1');
		error_reporting(E_ALL);	
//	}

/// get the time that the process started
	$startingMicroTime			= microtime(TRUE);

	$strPass					= "1";
	$theURL						= "$siteURL/rkstest-function-test/";
	$inp_semester				= '';
	$inp_rsave					= '';
	$jobname					= "RKS Function Test";
	$inp_mode				 	= '';
	$inp_verbose			 	= '';
	$inp_level					= '';
	$inp_email					= '';
	$thisOption					= '';
	
// get the input information
	if (isset($_REQUEST)) {
		foreach($_REQUEST as $str_key => $str_value) {
			if ($doDebug) {
				if (!is_array($str_value)) {
					echo "Key: $str_key | Value: $str_value <br />\n";
				} else {
					echo "Key: $str_key (array)<br />\n";
				}
			}
			if ($str_key 		== "enstr") {
				$enstr			 = $str_value;
				$enstr			= filter_var($enstr,FILTER_SANITIZE_STRING);
				$encodedString	= base64_decode($enstr);
				$myArray		= explode("&",$encodedString);
				foreach($myArray as $thisValue) {
					$enArray	= explode("=",$thisValue);
					if ($enArray[0] == 'strPass') {
						$enArray[1] = substr($enArray[1],0,1);
					}
					${$enArray[0]}	= $enArray[1];
					if ($doDebug) {
						echo "enstr contained $enArray[0] = $enArray[1]<br />";
					}
				}
			}
			if ($str_key 		== "strpass") {
				$strPass		 = $str_value;
				$strPass		 = filter_var($strPass,FILTER_SANITIZE_STRING);
			}
			if ($str_key 		== "inp_level") {
				$inp_level		 = $str_value;
				$inp_level		 = filter_var($inp_level,FILTER_SANITIZE_STRING);
			}
			if ($str_key 		== "thisOption") {
				$thisOption		 = $str_value;
				$thisOption		 = filter_var($thisOption,FILTER_SANITIZE_STRING);
			}
		}
	}
	
	if ($inp_mode == 'testMode') {
		$testMode		= TRUE;
	}
	
	if ($inp_verbose == 'Y') {
		$doDebug		= TRUE;
	}
	
	$content = "<style type='text/css'>
fieldset {font:'Times New Roman', sans-serif;color:#666;background-image:none;
background:#efefef;padding:2px;border:solid 1px #d3dd3;}

legend {font:'Times New Roman', sans-serif;color:#666;font-weight:bold;
font-variant:small-caps;background:#d3d3d3;padding:2px 6px;margin-bottom:8px;}

label {font:'Times New Roman', sans-serif;font-weight:bold;line-height:normal;
text-align:right;margin-right:10px;position:relative;display:block;float:left;width:150px;}

textarea.formInputText {font:'Times New Roman', sans-serif;color:#666;
background:#fee;padding:2px;border:solid 1px #f66;margin-right:5px;margin-bottom:5px;}

textarea.formInputText:focus {color:#000;background:#ffffff;border:solid 1px #006600;}

textarea.formInputText:hover {color:#000;background:#ffffff;border:solid 1px #006600;}

input.formInputText {color:#666;background:#fee;padding:2px;
border:solid 1px #f66;margin-right:5px;margin-bottom:5px;}

input.formInputText:focus {color:#000;background:#ffffff;border:solid 1px #006600;}

input.formInputText:hover {color:#000;background:#ffffff;border:solid 1px #006600;}

input.formInputFile {color:#666;background:#fee;padding:2px;border:
solid 1px #f66;margin-right:5px;margin-bottom:5px;height:20px;}

input.formInputFile:focus {color:#000;background:#ffffff;border:solid 1px #006600;}

select.formSelect {color:#666;background:#fee;padding:2px;
border:solid 1px #f66;margin-right:5px;margin-bottom:5px;cursor:pointer;}

select.formSelect:hover {color:#333;background:#ccffff;border:solid 1px #006600;}

input.formInputButton {vertical-align:middle;font-weight:bolder;
text-align:center;color:#300;background:#f99;padding:1px;border:solid 1px #f66;
cursor:pointer;position:relative;float:left;}

input.formInputButton:hover {color:#f8f400;}

input.formInputButton:active {color:#00ffff;}

tr {color:#333;background:#eee;}

table{font:'Times New Roman', sans-serif;background-image:none;border-collapse:collapse;}

th {color:#ffff;background-color:#000;padding:5px;font-size:small;}

td {padding:5px;font-size:small;}

th:first-child,
td:first-child {
 padding-left: 10px;
}

th:last-child,
td:last-child {
	padding-right: 5px;
}
</style>";	



	if ("1" == $strPass) {
		$content 		.= "<h3>$jobname</h3>
<p>
<form method='post' action='$theURL' 
name='selection_form' ENCTYPE='multipart/form-data'>
<input type='hidden' name='strpass' value='2'>
<table style='border-collapse:collapse;'>
<tr><td colspan='2'><input class='formInputButton' type='submit' value='Submit' /></td></tr></table>
</form></p>";
	

///// Pass 2 -- do the work


	} elseif ("2" == $strPass) {
	
		$classArray		= array();
		$errorArray		= array();

		$ii				= 0;

		echo "<b>Starting Test 1</b> Testing AdvisorClass<br />";
	
		$sql 	= "select * from wpw1_cwa_consolidated_advisorclass 
					where semester = '2024 Jan/Feb' 
					order by advisor_call_sign";
		$wpw1_cwa_advisorclass				= $wpdb->get_results($sql);
		if ($wpw1_cwa_advisorclass === FALSE) {
			$myError			= $wpdb->last_error;
			$myQuery			= $wpdb->last_query;
			if ($doDebug) {
				echo "Reading $advisorClassTableName table failed<br />
					  wpdb->last_query: $myQuery<br />
					  wpdb->last_error: $myError<br />";
			}
			$errorMsg			= "$jobname Reading $advisorClassTableName table failed. <p>SQL: $myQuery</p><p> Error: $myError</p>";
			sendErrorEmail($errorMsg);
		} else {
			$numACRows						= $wpdb->num_rows;
			if ($doDebug) {
				$myStr						= $wpdb->last_query;
				echo "ran $myStr<br />and found $numACRows rows<br />";
			}
			if ($numACRows > 0) {
				foreach ($wpw1_cwa_advisorclass as $advisorClassRow) {
					$advisorClass_ID				 		= $advisorClassRow->advisorclass_id;
					$advisorClass_advisor_call_sign 		= $advisorClassRow->advisor_call_sign;
					$advisorClass_advisor_first_name 		= $advisorClassRow->advisor_first_name;
					$advisorClass_advisor_last_name 		= stripslashes($advisorClassRow->advisor_last_name);
					$advisorClass_advisor_id 				= $advisorClassRow->advisor_id;
					$advisorClass_sequence 					= $advisorClassRow->sequence;
					$advisorClass_semester 					= $advisorClassRow->semester;
					$advisorClass_timezone 					= $advisorClassRow->time_zone;
					$advisorClass_timezone_id				= $advisorClassRow->timezone_id;		// new
					$advisorClass_timezone_offset			= $advisorClassRow->timezone_offset;	// new
					$advisorClass_level 					= $advisorClassRow->level;
					$advisorClass_class_size 				= $advisorClassRow->class_size;
					$advisorClass_class_schedule_days 		= $advisorClassRow->class_schedule_days;
					$advisorClass_class_schedule_times 		= $advisorClassRow->class_schedule_times;
					$advisorClass_class_schedule_days_utc 	= $advisorClassRow->class_schedule_days_utc;
					$advisorClass_class_schedule_times_utc 	= $advisorClassRow->class_schedule_times_utc;
					$advisorClass_action_log 				= $advisorClassRow->action_log;
					$advisorClass_class_incomplete 			= $advisorClassRow->class_incomplete;
					$advisorClass_date_created				= $advisorClassRow->date_created;
					$advisorClass_date_updated				= $advisorClassRow->date_updated;
					$advisorClass_student01 				= $advisorClassRow->student01;
					$advisorClass_student02 				= $advisorClassRow->student02;
					$advisorClass_student03 				= $advisorClassRow->student03;
					$advisorClass_student04 				= $advisorClassRow->student04;
					$advisorClass_student05 				= $advisorClassRow->student05;
					$advisorClass_student06 				= $advisorClassRow->student06;
					$advisorClass_student07 				= $advisorClassRow->student07;
					$advisorClass_student08 				= $advisorClassRow->student08;
					$advisorClass_student09 				= $advisorClassRow->student09;
					$advisorClass_student10 				= $advisorClassRow->student10;
					$advisorClass_student11 				= $advisorClassRow->student11;
					$advisorClass_student12 				= $advisorClassRow->student12;
					$advisorClass_student13 				= $advisorClassRow->student13;
					$advisorClass_student14 				= $advisorClassRow->student14;
					$advisorClass_student15 				= $advisorClassRow->student15;
					$advisorClass_student16 				= $advisorClassRow->student16;
					$advisorClass_student17 				= $advisorClassRow->student17;
					$advisorClass_student18 				= $advisorClassRow->student18;
					$advisorClass_student19 				= $advisorClassRow->student19;
					$advisorClass_student20 				= $advisorClassRow->student20;
					$advisorClass_student21 				= $advisorClassRow->student21;
					$advisorClass_student22 				= $advisorClassRow->student22;
					$advisorClass_student23 				= $advisorClassRow->student23;
					$advisorClass_student24 				= $advisorClassRow->student24;
					$advisorClass_student25 				= $advisorClassRow->student25;
					$advisorClass_student26 				= $advisorClassRow->student26;
					$advisorClass_student27 				= $advisorClassRow->student27;
					$advisorClass_student28 				= $advisorClassRow->student28;
					$advisorClass_student29 				= $advisorClassRow->student29;
					$advisorClass_student30 				= $advisorClassRow->student30;
					$class_number_students					= $advisorClassRow->number_students;
					$class_evaluation_complete 				= $advisorClassRow->evaluation_complete;
					$class_comments							= $advisorClassRow->class_comments;
					$copycontrol							= $advisorClassRow->copy_control;

					$advisorClass_advisor_last_name  		= no_magic_quotes($advisorClass_advisor_last_name);

//					echo "<br /><b>Advisor: $advisorClass_advisor_call_sign</b> Class: $advisorClass_sequence<br />";

					$numStudentCheck		= 0;
					for ($snum=1;$snum<31;$snum++) {
						$gotDup				= FALSE;
						$checkAssigned		= FALSE;

						if ($snum < 10) {
							$strSnum 		= str_pad($snum,2,'0',STR_PAD_LEFT);
						} else {
							$strSnum		= strval($snum);
						}
						$theInfo			= ${'advisorClass_student' . $strSnum};
						if ($theInfo != '') {
							$numStudentCheck++;
 							if (!array_key_exists($theInfo,$classArray)) {
 								$classArray[$theInfo]	= "$advisorClass_advisor_call_sign|$advisorClass_sequence";
 								$checkAssigned	= TRUE;
 							} else {
 								$thisClassInfo			= $classArray[$theInfo];
 								$myArray				= explode("|",$thisClassInfo);
 								$errorArray[]			= "Student $theInfo assigned to $myArray[0] $myArray[1] and $advisorClass_advisor_call_sign $advisorClass_sequence<br />";
 							}
 							// see what the student record says
 							$getStudent			= $wpdb->get_results("select * from wpw1_cwa_consolidated_student 
 															where call_sign = '$theInfo' 
 															and semester='2024 Jan/Feb'");
 							if ($getStudent === FALSE) {
 								$lastError		= $wpdb->last_error;
 								$lastQuery		= $wpdb->last_query;
 								if ($doDebug) {
 									echo "getting student info for $theInfo failed. Error: $lastError<br />Query: $last_query<br />";
 								}
 							} else {
 								$numRows		= $wpdb->num_rows;
								if ($numRows > 0) {
									foreach($getStudent as $getStudentRow) {
										$student_call_sign		= $getStudentRow->call_sign;
										$student_response		= $getStudentRow->response;
										$student_status			= $getStudentRow->student_status;
										$assignedAdvisor		= $getStudentRow->assigned_advisor;
										$assignedAdvisorClass	 = $getStudentRow->assigned_advisor_class;

										$theLink				= "<a href='$siteURL/cwa-display-and-update-student-information/?request_type=callsign&request_info=$student_call_sign&request_table=wpw1_cwa_consolidated_student&strpass=2' target='_blank'>$student_call_sign</a>";
										
										if ($student_response == 'Y') {
											if ($student_status != 'S' && $student_status != 'Y' && $student_status != 'V') {
												$errorArray[]	= "$advisorClass_advisor_call_sign class $advisorClass_sequence says $theLink 
is assigned but student status is not Y, S, or V<br />";
											}
										} else {
											$errorArray[]	= "$advisorClass_advisor_call_sign class $advisorClass_sequence says $theLink 
is assigned but student response is not Y<br />";
										}
										if ($assignedAdvisor == $advisorClass_advisor_call_sign) {
											if ($assignedAdvisorClass != $advisorClass_sequence) {
											$errorArray[]	= "$advisorClass_advisor_call_sign class $advisorClass_sequence says $theLink 
is assigned but student assigned class is $assignedAdvisorClass <br />";
											}
										} else {
											$errorArray[]	= "$advisorClass_advisor_call_sign class $advisorClass_sequence says $theLink 
is assigned but student assigned advisor is $assignedAdvisor<br />";
										}
									}
								} else {
									$errorArray[]	= "$advisorClass_advisor_call_sign class $advisorClass_sequence says $theLink 
is assigned no student record was found<br />";
								
 								}
 							}
						}
					}
					// see if the number of students matchs the number check
					if ($numStudentCheck != $class_number_students) {
						$errorArray[]			= "$advisorClass_advisor_call_sign class $advisorClass_sequence mismatch on number of students. $numStudentsCheck assigned, record says $class_number_students<br />";
					}
				}

				echo "<br /><b>Starting Test 2</b> Testing Students against AdvisorClass<br />";
				
				// Now check students against the advisorclass
				$sql			= "select * from wpw1_cwa_consolidated_student  
									where semester='2024 Jan/Feb' 
									order by call_sign";
				$wpw1_cwa_student		= $wpdb->get_results($sql);
				if ($wpw1_cwa_student === FALSE) {
					$myError			= $wpdb->last_error;
					$myQuery			= $wpdb->last_query;
					if ($doDebug) {
						echo "Reading $studentTableName table failed<br />
							  wpdb->last_query: $myQuery<br />
							  wpdb->last_error: $myError<br />";
					}
					$errorMsg			= "$jobname reading $studentTableName failed. <p>SQL: $myQuery</p><p> Error: $myError</p>";
					sendErrorEmail($errorMsg);
					$content		.= "Unable to obtain content from $studentTableName<br />";
				} else {
					$numSRows			= $wpdb->num_rows;
					if ($doDebug) {
						$myStr			= $wpdb->last_query;
						echo "ran $myStr<br />and found $numSRows rows<br />";
					}
					if ($numSRows > 0) {
						foreach ($wpw1_cwa_student as $studentRow) {
							$student_ID								= $studentRow->student_id;
							$student_call_sign						= strtoupper($studentRow->call_sign);
							$student_first_name						= $studentRow->first_name;
							$student_last_name						= stripslashes($studentRow->last_name);
							$student_email  						= strtolower(strtolower($studentRow->email));
							$student_phone  						= $studentRow->phone;
							$student_ph_code						= $studentRow->ph_code;
							$student_city  							= $studentRow->city;
							$student_state  						= $studentRow->state;
							$student_zip_code  						= $studentRow->zip_code;
							$student_country  						= $studentRow->country;
							$student_country_code					= $studentRow->country_code;
							$student_time_zone  					= $studentRow->time_zone;
							$student_timezone_id					= $studentRow->timezone_id;
							$student_timezone_offset				= $studentRow->timezone_offset;
							$student_whatsapp						= $studentRow->whatsapp_app;
							$student_signal							= $studentRow->signal_app;
							$student_telegram						= $studentRow->telegram_app;
							$student_messenger						= $studentRow->messenger_app;					
							$student_wpm 	 						= $studentRow->wpm;
							$student_youth  						= $studentRow->youth;
							$student_age  							= $studentRow->age;
							$student_student_parent 				= $studentRow->student_parent;
							$student_student_parent_email  			= strtolower($studentRow->student_parent_email);
							$student_level  						= $studentRow->level;
							$student_waiting_list 					= $studentRow->waiting_list;
							$student_request_date  					= $studentRow->request_date;
							$student_semester						= $studentRow->semester;
							$student_notes  						= $studentRow->notes;
							$student_welcome_date  					= $studentRow->welcome_date;
							$student_email_sent_date  				= $studentRow->email_sent_date;
							$student_email_number  					= $studentRow->email_number;
							$student_response  						= strtoupper($studentRow->response);
							$student_response_date  				= $studentRow->response_date;
							$student_abandoned  					= $studentRow->abandoned;
							$student_student_status  				= strtoupper($studentRow->student_status);
							$student_action_log  					= $studentRow->action_log;
							$student_pre_assigned_advisor  			= $studentRow->pre_assigned_advisor;
							$student_selected_date  				= $studentRow->selected_date;
							$student_no_catalog			 			= $studentRow->no_catalog;
							$student_hold_override  				= $studentRow->hold_override;
							$student_messaging  					= $studentRow->messaging;
							$student_assigned_advisor  				= $studentRow->assigned_advisor;
							$student_advisor_select_date  			= $studentRow->advisor_select_date;
							$student_advisor_class_timezone 		= $studentRow->advisor_class_timezone;
							$student_hold_reason_code  				= $studentRow->hold_reason_code;
							$student_class_priority  				= $studentRow->class_priority;
							$student_assigned_advisor_class 		= $studentRow->assigned_advisor_class;
							$student_promotable  					= $studentRow->promotable;
							$student_excluded_advisor  				= $studentRow->excluded_advisor;
							$student_student_survey_completion_date	= $studentRow->student_survey_completion_date;
							$student_available_class_days  			= $studentRow->available_class_days;
							$student_intervention_required  		= $studentRow->intervention_required;
							$student_copy_control  					= $studentRow->copy_control;
							$student_first_class_choice  			= $studentRow->first_class_choice;
							$student_second_class_choice  			= $studentRow->second_class_choice;
							$student_third_class_choice  			= $studentRow->third_class_choice;
							$student_first_class_choice_utc  		= $studentRow->first_class_choice_utc;
							$student_second_class_choice_utc  		= $studentRow->second_class_choice_utc;
							$student_third_class_choice_utc  		= $studentRow->third_class_choice_utc;
							$student_date_created 					= $studentRow->date_created;
							$student_date_updated			  		= $studentRow->date_updated;

							$student_last_name 						= no_magic_quotes($student_last_name);
							$student_excluded_advisor_array			= explode("|",$student_excluded_advisor);

					
							if ($student_student_status == 'Y' || $student_student_status == 'S' || $student_student_status == 'V') {
								$theLink		= "<a href='$siteURL/cwa-display-and-update-student-information/?request_type=callsign&request_info=$student_call_sign&request_table=wpw1_cwa_consolidated_student&strpass=2' target='_blank'>$student_call_sign</a>";

								if ($doDebug) {
									echo "<br />Processing $student_call_sign<br />
											response: $student_response<br />
											status: $student_student_status<br />
											assigned advisor: $student_assigned_advisor<br />
											assigned advisor class: $student_assigned_advisor_class<br />";
								}

								// see if the student is in the class table
								if (array_key_exists($student_call_sign,$classArray)) {
									$thisClass			= $classArray[$student_call_sign];
									$myArray			= explode("|",$thisClass);
									$classAdvisor		= $myArray[0];
									$classClass			= $myArray[1];

									if ($student_assigned_advisor == $classAdvisor) {
										if ($student_assigned_advisor_class != $classClass) {
											$errorArray[]	= "$theLink student record says student is assigned 
to $student_assigned_advisor class $student_assigned_advisor_class. However advisorClass record says 
student is assigned to $classAdvisor class $classClass<br />";
										}
									} else {
										$errorArray[]	= "$theLink student record says student is assigned 
to $student_assigned_advisor class $student_assigned_advisor_class. However advisorClass record says 
student is assigned to $classAdvisor class $classClass<br />";
									}
//								} else {
//									$errorArray[]	= "advisorClass record says $theLink is assigned to 
// $classAdvisor class $classClass. The student record has no assignment<br />";
								}
							}
						} 
					} else {
						echo "no students found in student table<br />";
					}
				}
				if (count($errorArray) > 0) {
					echo "<br /><b>Have Errors:</b><br />";
					foreach($errorArray as $thisError) {
						echo $thisError;
					}
				}
			} else {
				echo "No records found in advisorClass table<br />";
			}
		}

	}
	$thisTime 		= date('Y-m-d H:i:s');
	$content 		.= "<br /><br /><p>Prepared at $thisTime</p>";
	return $content;
}
add_shortcode ('rksFunctionTest', 'rksFunctionTest_func');
